// Generated by view binder compiler. Do not edit!
package com.honeywell.barcodeexample.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.CheckBox;
import android.widget.LinearLayout;
import android.widget.ScrollView;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.honeywell.barcodeexample.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ZebraScanBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final Button btnCreateProfile;

  @NonNull
  public final Button btnSetDecoders;

  @NonNull
  public final Button btnSoftScanTrigger;

  @NonNull
  public final CheckBox chkCode128;

  @NonNull
  public final CheckBox chkCode39;

  @NonNull
  public final CheckBox chkEAN13;

  @NonNull
  public final CheckBox chkUPCA;

  @NonNull
  public final TextView lblScanData;

  @NonNull
  public final TextView lblScanDecoder;

  @NonNull
  public final TextView lblScannerStatus;

  @NonNull
  public final ScrollView scrollView;

  @NonNull
  public final TextView txtCreateProfileDesc;

  @NonNull
  public final TextView txtDWVersion;

  @NonNull
  public final TextView txtGetDWVersion;

  @NonNull
  public final TextView txtScanData;

  @NonNull
  public final TextView txtScanDecoder;

  @NonNull
  public final TextView txtScannerStatus;

  @NonNull
  public final TextView txtSelectDecoders;

  private ZebraScanBinding(@NonNull LinearLayout rootView, @NonNull Button btnCreateProfile,
      @NonNull Button btnSetDecoders, @NonNull Button btnSoftScanTrigger,
      @NonNull CheckBox chkCode128, @NonNull CheckBox chkCode39, @NonNull CheckBox chkEAN13,
      @NonNull CheckBox chkUPCA, @NonNull TextView lblScanData, @NonNull TextView lblScanDecoder,
      @NonNull TextView lblScannerStatus, @NonNull ScrollView scrollView,
      @NonNull TextView txtCreateProfileDesc, @NonNull TextView txtDWVersion,
      @NonNull TextView txtGetDWVersion, @NonNull TextView txtScanData,
      @NonNull TextView txtScanDecoder, @NonNull TextView txtScannerStatus,
      @NonNull TextView txtSelectDecoders) {
    this.rootView = rootView;
    this.btnCreateProfile = btnCreateProfile;
    this.btnSetDecoders = btnSetDecoders;
    this.btnSoftScanTrigger = btnSoftScanTrigger;
    this.chkCode128 = chkCode128;
    this.chkCode39 = chkCode39;
    this.chkEAN13 = chkEAN13;
    this.chkUPCA = chkUPCA;
    this.lblScanData = lblScanData;
    this.lblScanDecoder = lblScanDecoder;
    this.lblScannerStatus = lblScannerStatus;
    this.scrollView = scrollView;
    this.txtCreateProfileDesc = txtCreateProfileDesc;
    this.txtDWVersion = txtDWVersion;
    this.txtGetDWVersion = txtGetDWVersion;
    this.txtScanData = txtScanData;
    this.txtScanDecoder = txtScanDecoder;
    this.txtScannerStatus = txtScannerStatus;
    this.txtSelectDecoders = txtSelectDecoders;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ZebraScanBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ZebraScanBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.zebra_scan, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ZebraScanBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.btnCreateProfile;
      Button btnCreateProfile = ViewBindings.findChildViewById(rootView, id);
      if (btnCreateProfile == null) {
        break missingId;
      }

      id = R.id.btnSetDecoders;
      Button btnSetDecoders = ViewBindings.findChildViewById(rootView, id);
      if (btnSetDecoders == null) {
        break missingId;
      }

      id = R.id.btnSoftScanTrigger;
      Button btnSoftScanTrigger = ViewBindings.findChildViewById(rootView, id);
      if (btnSoftScanTrigger == null) {
        break missingId;
      }

      id = R.id.chkCode128;
      CheckBox chkCode128 = ViewBindings.findChildViewById(rootView, id);
      if (chkCode128 == null) {
        break missingId;
      }

      id = R.id.chkCode39;
      CheckBox chkCode39 = ViewBindings.findChildViewById(rootView, id);
      if (chkCode39 == null) {
        break missingId;
      }

      id = R.id.chkEAN13;
      CheckBox chkEAN13 = ViewBindings.findChildViewById(rootView, id);
      if (chkEAN13 == null) {
        break missingId;
      }

      id = R.id.chkUPCA;
      CheckBox chkUPCA = ViewBindings.findChildViewById(rootView, id);
      if (chkUPCA == null) {
        break missingId;
      }

      id = R.id.lblScanData;
      TextView lblScanData = ViewBindings.findChildViewById(rootView, id);
      if (lblScanData == null) {
        break missingId;
      }

      id = R.id.lblScanDecoder;
      TextView lblScanDecoder = ViewBindings.findChildViewById(rootView, id);
      if (lblScanDecoder == null) {
        break missingId;
      }

      id = R.id.lblScannerStatus;
      TextView lblScannerStatus = ViewBindings.findChildViewById(rootView, id);
      if (lblScannerStatus == null) {
        break missingId;
      }

      id = R.id.scrollView;
      ScrollView scrollView = ViewBindings.findChildViewById(rootView, id);
      if (scrollView == null) {
        break missingId;
      }

      id = R.id.txtCreateProfileDesc;
      TextView txtCreateProfileDesc = ViewBindings.findChildViewById(rootView, id);
      if (txtCreateProfileDesc == null) {
        break missingId;
      }

      id = R.id.txtDWVersion;
      TextView txtDWVersion = ViewBindings.findChildViewById(rootView, id);
      if (txtDWVersion == null) {
        break missingId;
      }

      id = R.id.txtGetDWVersion;
      TextView txtGetDWVersion = ViewBindings.findChildViewById(rootView, id);
      if (txtGetDWVersion == null) {
        break missingId;
      }

      id = R.id.txtScanData;
      TextView txtScanData = ViewBindings.findChildViewById(rootView, id);
      if (txtScanData == null) {
        break missingId;
      }

      id = R.id.txtScanDecoder;
      TextView txtScanDecoder = ViewBindings.findChildViewById(rootView, id);
      if (txtScanDecoder == null) {
        break missingId;
      }

      id = R.id.txtScannerStatus;
      TextView txtScannerStatus = ViewBindings.findChildViewById(rootView, id);
      if (txtScannerStatus == null) {
        break missingId;
      }

      id = R.id.txtSelectDecoders;
      TextView txtSelectDecoders = ViewBindings.findChildViewById(rootView, id);
      if (txtSelectDecoders == null) {
        break missingId;
      }

      return new ZebraScanBinding((LinearLayout) rootView, btnCreateProfile, btnSetDecoders,
          btnSoftScanTrigger, chkCode128, chkCode39, chkEAN13, chkUPCA, lblScanData, lblScanDecoder,
          lblScannerStatus, scrollView, txtCreateProfileDesc, txtDWVersion, txtGetDWVersion,
          txtScanData, txtScanDecoder, txtScannerStatus, txtSelectDecoders);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
